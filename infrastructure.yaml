AWSTemplateFormatVersion: '2010-09-09'
Description: 'ECS CICD Lab Infrastructure in eu-central-1 with HA NAT Gateways'

Parameters:
  VpcCidr:
    Type: String
    Default: 10.0.0.0/16
  Region:
    Type: String
    Default: eu-central-1

Resources:
  # VPC
  ECSVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: !Ref VpcCidr
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: ECS-Lab-VPC

  # Subnets (2 AZs)
  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ECSVPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-1a

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ECSVPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public-Subnet-1b

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ECSVPC
      CidrBlock: 10.0.3.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private-Subnet-1a

  PrivateSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref ECSVPC
      CidrBlock: 10.0.4.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      Tags:
        - Key: Name
          Value: Private-Subnet-1b

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: ECS-Lab-IGW

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref ECSVPC
      InternetGatewayId: !Ref InternetGateway

  # NAT Gateways (HA)
  NatGatewayEIP1:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: Nat-EIP-1a

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP1.AllocationId
      SubnetId: !Ref PublicSubnet1
      Tags:
        - Key: Name
          Value: Nat-GW-1a

  NatGatewayEIP2:
    Type: AWS::EC2::EIP
    DependsOn: AttachGateway
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: Nat-EIP-1b

  NatGateway2:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGatewayEIP2.AllocationId
      SubnetId: !Ref PublicSubnet2
      Tags:
        - Key: Name
          Value: Nat-GW-1b

  # Route tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ECSVPC
      Tags:
        - Key: Name
          Value: Public-RT

  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ECSVPC
      Tags:
        - Key: Name
          Value: Private-RT-1a

  PrivateRouteTable2:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref ECSVPC
      Tags:
        - Key: Name
          Value: Private-RT-1b

  PrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway1

  PrivateRoute2:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway2

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet1
      RouteTableId: !Ref PrivateRouteTable1

  PrivateSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet2
      RouteTableId: !Ref PrivateRouteTable2

  # Security Groups
  ALBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to ALB
      VpcId: !Ref ECSVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ALB-SG

  ECSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow ALB to ECS on 8080
      VpcId: !Ref ECSVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          SourceSecurityGroupId: !Ref ALBSecurityGroup
      Egress:
        - IpProtocol: -1
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: ECS-SG

  # ECR repository
  ECRRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: java-app-repo
      ImageTagMutability: MUTABLE
      ImageScanningConfiguration:
        ScanOnPush: true
      Tags:
        - Key: Name
          Value: Lab-ECR

  # ECS cluster & roles
  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: LabCluster
      Tags:
        - Key: Name
          Value: Lab-Cluster

  ECSExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Tags:
        - Key: Name
          Value: ECS-Execution-Role

  ECSTaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies: []
      Tags:
        - Key: Name
          Value: ECS-Task-Role

  # Task definition (initial)
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: lab-task
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      Cpu: 256
      Memory: 512
      ExecutionRoleArn: !GetAtt ECSExecutionRole.Arn
      TaskRoleArn: !GetAtt ECSTaskRole.Arn
      ContainerDefinitions:
        - Name: app-container
          Image: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/java-app-repo:latest"
          PortMappings:
            - ContainerPort: 8080
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: /ecs/lab-task
              awslogs-region: !Ref Region
              awslogs-stream-prefix: ecs
      Tags:
        - Key: Name
          Value: Lab-TaskDef

  # ECS Service (uses CodeDeploy controller)
  ECSService:
    Type: AWS::ECS::Service
    DependsOn:
      - ALBListener
    Properties:
      Cluster: !Ref ECSCluster
      ServiceName: LabService
      TaskDefinition: !Ref TaskDefinition
      DesiredCount: 2
      LaunchType: FARGATE
      NetworkConfiguration:
        AwsvpcConfiguration:
          Subnets:
            - !Ref PrivateSubnet1
            - !Ref PrivateSubnet2
          SecurityGroups:
            - !Ref ECSSecurityGroup
          AssignPublicIp: DISABLED
      LoadBalancers:
        - ContainerName: app-container
          ContainerPort: 8080
          TargetGroupArn: !Ref ALBTargetGroup
      DeploymentController:
        Type: CODE_DEPLOY
      Tags:
        - Key: Name
          Value: Lab-Service

  # ALB
  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: LabALB
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      SecurityGroups:
        - !Ref ALBSecurityGroup
      Scheme: internet-facing
      Type: application
      Tags:
        - Key: Name
          Value: Lab-ALB

  # Target groups: Blue (for service) and Green (for CodeDeploy)
  ALBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ALB
    Properties:
      VpcId: !Ref ECSVPC
      Name: Lab-TargetGroup-Blue
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: Lab-TG-Blue

  ALBTargetGroupGreen:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ALB
    Properties:
      VpcId: !Ref ECSVPC
      Name: Lab-TargetGroup-Green
      Port: 8080
      Protocol: HTTP
      TargetType: ip
      HealthCheckPath: /
      HealthCheckIntervalSeconds: 30
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
      Tags:
        - Key: Name
          Value: Lab-TG-Green

  # ALB listener (prod)
  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn:
      - ALB
      - ALBTargetGroup
    Properties:
      LoadBalancerArn: !Ref ALB
      Port: 80
      Protocol: HTTP
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref ALBTargetGroup

  # S3 for pipeline artifacts
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "lab-artifact-${AWS::AccountId}-${AWS::Region}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      Tags:
        - Key: Name
          Value: Lab-Artifacts

  # IAM roles for pipeline & codedeploy
  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodePipeline_FullAccess
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryReadOnly
        - arn:aws:iam::aws:policy/AWSCodeDeployFullAccess
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
      Policies:
        - PolicyName: CodeBuildPermissions
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codebuild:StopBuild
                Resource: !GetAtt CodeBuildProject.Arn
      Tags:
        - Key: Name
          Value: CodePipeline-Role

  CodeDeployRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codedeploy.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AWSCodeDeployRoleForECS
      Tags:
        - Key: Name
          Value: CodeDeploy-Role

  # CodeBuild role (for build stage)
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryPowerUser
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchLogsFullAccess
      Tags:
        - Key: Name
          Value: CodeBuild-Role

  # CodeBuild project: FIXED AppSpec generation
  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: ecs-artifact-generator
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: |
          version: 0.2
          phases:
            install:
              runtime-versions:
                python: 3.9
            pre_build:
              commands:
                - echo "Preparing appspec and updated taskdef"
                - echo "AWS account $AWS_ACCOUNT_ID, region $AWS_DEFAULT_REGION"
                - pip install PyYAML
            build:
              commands:
                - IMAGE_URI="$AWS_ACCOUNT_ID.dkr.ecr.$AWS_DEFAULT_REGION.amazonaws.com/java-app-repo:latest"
                - echo "Image URI $IMAGE_URI"
                - |
                  cat > appspec.yaml << 'EOF'
                  version: 0.0
                  Resources:
                    - TargetService:
                        Type: AWS::ECS::Service
                        Properties:
                          TaskDefinition: <TASK_DEFINITION>
                          LoadBalancerInfo:
                            ContainerName: "app-container"
                            ContainerPort: 8080
                  EOF
                - |
                  cat > taskdef.json << EOF
                  {
                    "family": "lab-task",
                    "networkMode": "awsvpc",
                    "requiresCompatibilities": ["FARGATE"],
                    "cpu": "256",
                    "memory": "512",
                    "executionRoleArn": "$ECS_EXEC_ROLE_ARN",
                    "taskRoleArn": "$ECS_TASK_ROLE_ARN",
                    "containerDefinitions": [
                      {
                        "name": "app-container",
                        "image": "$IMAGE_URI",
                        "portMappings": [{"containerPort": 8080}],
                        "logConfiguration": {
                          "logDriver": "awslogs",
                          "options": {
                            "awslogs-group": "/ecs/lab-task",
                            "awslogs-region": "$AWS_DEFAULT_REGION",
                            "awslogs-stream-prefix": "ecs"
                          }
                        }
                      }
                    ]
                  }
                  EOF
                - echo "=== Generated appspec.yaml ==="
                - cat appspec.yaml
                - echo "=== Generated taskdef.json ==="
                - cat taskdef.json
                - echo "=== Validating YAML syntax ==="
                - python3 -c "import yaml; yaml.safe_load(open('appspec.yaml'))" && echo "AppSpec YAML is valid" || (echo "AppSpec YAML is invalid" && exit 1)
                - echo "=== Validating JSON syntax ==="
                - python3 -c "import json; json.load(open('taskdef.json'))" && echo "TaskDef JSON is valid" || (echo "TaskDef JSON is invalid" && exit 1)
          artifacts:
            files:
              - appspec.yaml
              - taskdef.json
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:5.0
        PrivilegedMode: false
        EnvironmentVariables:
          - Name: AWS_ACCOUNT_ID
            Value: !Ref AWS::AccountId
          - Name: AWS_DEFAULT_REGION
            Value: !Ref Region
          - Name: ECS_EXEC_ROLE_ARN
            Value: !GetAtt ECSExecutionRole.Arn
          - Name: ECS_TASK_ROLE_ARN
            Value: !GetAtt ECSTaskRole.Arn
      Artifacts:
        Type: CODEPIPELINE

  # CodeDeploy application
  CodeDeployApp:
    Type: AWS::CodeDeploy::Application
    Properties:
      ApplicationName: LabCodeDeployApp
      ComputePlatform: ECS
      Tags:
        - Key: Name
          Value: Lab-CodeDeploy-App

  # DeploymentGroup for ECS blue/green (uses existing service)
  DeploymentGroup:
    Type: AWS::CodeDeploy::DeploymentGroup
    DependsOn:
      - ECSService
      - ALBListener
    Properties:
      ApplicationName: !Ref CodeDeployApp
      DeploymentGroupName: LabDeploymentGroup
      ServiceRoleArn: !GetAtt CodeDeployRole.Arn
      BlueGreenDeploymentConfiguration:
        DeploymentReadyOption:
          ActionOnTimeout: CONTINUE_DEPLOYMENT
        TerminateBlueInstancesOnDeploymentSuccess:
          Action: TERMINATE
          TerminationWaitTimeInMinutes: 5
      DeploymentStyle:
        DeploymentType: BLUE_GREEN
        DeploymentOption: WITH_TRAFFIC_CONTROL
      ECSServices:
        - ClusterName: !Ref ECSCluster
          ServiceName: !GetAtt ECSService.Name
      LoadBalancerInfo:
        TargetGroupPairInfoList:
          - ProdTrafficRoute:
              ListenerArns:
                - !Ref ALBListener
            TargetGroups:
              - Name: Lab-TargetGroup-Blue
              - Name: Lab-TargetGroup-Green
      Tags:
        - Key: Name
          Value: Lab-Deployment-Group

  # EventBridge role and rule to trigger pipeline on ECR push
  EventBridgeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: TriggerPipeline
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action: codepipeline:StartPipelineExecution
                Resource: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ECSPipeline}
      Tags:
        - Key: Name
          Value: EventBridge-Role

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: Trigger pipeline on ECR image push
      EventPattern:
        source:
          - aws.ecr
        detail-type:
          - ECR Image Action
        detail:
          action-type:
            - PUSH
          repository-name:
            - !Ref ECRRepo
          image-tag:
            - latest
      State: ENABLED
      Targets:
        - Arn: !Sub arn:aws:codepipeline:${AWS::Region}:${AWS::AccountId}:${ECSPipeline}
          RoleArn: !GetAtt EventBridgeRole.Arn
          Id: PipelineTrigger
      Tags:
        - Key: Name
          Value: ECR-Push-Rule

  # CodePipeline: Source = ECR, Build = CodeBuild (new), Deploy = CodeDeploy
  ECSPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: LabPipeline
      RoleArn: !GetAtt CodePipelineRole.Arn
      ArtifactStore:
        Location: !Ref ArtifactBucket
        Type: S3
      Stages:
        - Name: Source
          Actions:
            - Name: ECRSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Provider: ECR
                Version: '1'
              Configuration:
                ImageTag: latest
                RepositoryName: !Ref ECRRepo
              OutputArtifacts:
                - Name: SourceOutput
        - Name: Build
          Actions:
            - Name: BuildArtifact
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref CodeBuildProject
        - Name: Deploy
          Actions:
            - Name: DeployToECS
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Provider: CodeDeploy
                Version: '1'
              Configuration:
                ApplicationName: !Ref CodeDeployApp
                DeploymentGroupName: !Ref DeploymentGroup
              InputArtifacts:
                - Name: BuildOutput
      Tags:
        - Key: Name
          Value: Lab-Pipeline

  # CloudWatch Log Group
  ECSLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: /ecs/lab-task
      RetentionInDays: 7
      Tags:
        - Key: Name
          Value: ECS-Logs

Outputs:
  ALBEndpoint:
    Description: ALB DNS for app access
    Value: !GetAtt ALB.DNSName
  ECRRepoURI:
    Description: ECR URI
    Value: !GetAtt ECRRepo.RepositoryUri
  PipelineName:
    Description: CodePipeline name
    Value: !Ref ECSPipeline